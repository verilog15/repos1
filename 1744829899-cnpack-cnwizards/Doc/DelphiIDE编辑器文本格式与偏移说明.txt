**********************************************************************
                     CnPack For Delphi/C++Builder
                     中国人自己的免费第三方开发包
                 (C)Copyright 2001-2025 CnPack 开发组
**********************************************************************

                   DelphiIDE编辑器文本格式与偏移说明
                           Revision 1.0.1.1
                       =========================
                         作者：刘啸 2023.02.12


Delphi IDE 分三种：Delphi 5 6 7 的 纯 Ansi 版，Delphi 2005 ~ 2007 的 Utf8 版，以及 Delphi 2009 及其以上的 Unicode 版本。
这三种 IDE 的编辑器控件各不相同，所涉及的 OpenTools API 与其他原生接口有很大的不同。

整理了一个表：

=====================================================================================================
                            Delphi 5/6/7            Delphi 2005~2007           Delphi 2009 以上
-----------------------------------------------------------------------------------------------------
EditControl.LineText 属性   AnsiString              AnsiString + Utf8          UnicodeString（Utf16）
代表当前光标所在的行文字    Tab 已展开              Tab 已展开                 Tab 已展开
-----------------------------------------------------------------------------------------------------
EditControl 的              AnsiString              AnsiString + Utf8          UnicodeString（Utf16）
GetTextAtLine 方法          Tab 已展开              Tab 已展开                 Tab 已展开
-----------------------------------------------------------------------------------------------------
IOTAEditReader 接口的       AnsiString              AnsiString + Utf8          AnsiString + Utf8
GetText 方法                Tab 未展开              Tab 未展开                 Tab 未展开
-----------------------------------------------------------------------------------------------------
IOTAEditWriter 接口的       AnsiString              AnsiString + Utf8          AnsiString + Utf8
Insert 方法的 PChar 参数
-----------------------------------------------------------------------------------------------------
IOTAEditReader 与           Ansi、0 开始            Utf8、0 开始               Utf8、0 开始
IOTAEditWriter 接口的       Tab 未展开、算 1        Tab 未展开、算 1           Tab 未展开、算 1
线性偏移 Position
------------------------------------------------ -----------------------------------------------------
IOTAEditBlock 接口的        AnsiString              AnsiString + Utf8          UnicodeString（Utf16）
Text 属性/GetText 方法      Tab 未展开              Tab 未展开                 Tab 未展开
-----------------------------------------------------------------------------------------------------
EditControl 的              Ansi、1 开始            Utf8、1 开始               Utf8、1 开始
GetAttributeAtPos 所需偏移
-----------------------------------------------------------------------------------------------------
 TOTAEditPos 的 Col         Ansi、1 开始            Utf8、1 开始               Ansi、1 开始
（EditView 的 CursorPos）
-----------------------------------------------------------------------------------------------------
IOTAEditPosition 的相对     Ansi、0 开始            Utf8、0 开始               Utf8、0 开始
Move 方法所使用的 Col                              （为 1 时也均可移动一个汉字字符，其余不对位的情况光标往左靠）
-----------------------------------------------------------------------------------------------------
IOTAEditPosition 的绝对     Ansi、1 开始            Utf8、1 开始               Utf8、1 开始
Move/Real 方法所使用的 Col  （三类 IDE 中，Col 在不对位的情况下光标均会往左靠）
-----------------------------------------------------------------------------------------------------
IOTAEditPosition 的         字符、1 开始            字符、1 开始               字符、1 开始
BackspaceDelete 的 Num      （三类 IDE 中均删整字符，可以理解为 Utf16）
-----------------------------------------------------------------------------------------------------
TOTACharPos 的 CharIndex    Ansi、0 开始            Utf8、0 开始               Ansi、0 开始
（Tab 键算一个字符）                                                          （有宽字符时由 ConvertPos 转换而来的结果有混乱）
-----------------------------------------------------------------------------------------------------
EditView 的 CharPosToPos    Ansi、0 开始            Utf8、0 开始               当前行之前 Utf8、当前行内 Ansi，0 开始
转换而来的文件内的线性 Pos  不超过当前行尾          不超过当前行尾             不超过当前行尾（有宽字符时线性结果必然混乱）
-----------------------------------------------------------------------------------------------------
编辑器状态栏上的行列显示    三类 IDE 统一，为 1 开始的 Ansi，单字节字符占一列，一汉字占两列
=====================================================================================================
CnPack 语法解析器           AnsiChar                WideChar                   WideChar
所使用的字符偏移
-----------------------------------------------------------------------------------------------------
CnPack 读入编辑器内容至     AnsiChar                WideChar                   WideChar
Stream 时使用的格式
-----------------------------------------------------------------------------------------------------
CnPack 的 Pascal 语法       列 Ansi                 列有 Ansi/Wide             列有 Ansi/Wide
解析器所使用的行列          行列均 0 开始           行列均 1 开始              行列均 1 开始
-----------------------------------------------------------------------------------------------------
CnPack 的 Cpp 语法          列 Ansi                 列有 Ansi/Wide             列有 Ansi/Wide
解析器所使用的行列          行列均 1 开始           行列均 1 开始              行列均 1 开始
-----------------------------------------------------------------------------------------------------
CnPack 的 Pascal 结构       列 Ansi                 列有 Ansi/Wide             列有 Ansi/Wide
解析器所使用的行列          行列均 0 开始           行列均 0 开始，可展开 Tab  行列均 0 开始，可展开 Tab
-----------------------------------------------------------------------------------------------------
CnPack 的 Cpp 结构          列 Ansi                 列有 Ansi/Wide             列有 Ansi/Wide
解析器所使用的行列          行列均 0 开始           行列均 0 开始，可展开 Tab  行列均 0 开始，可展开 Tab
-----------------------------------------------------------------------------------------------------
CnPack 的 Pas/Cpp 结构      Ansi 线性位置 0 开始    Utf16 线性位置，0 开始     Utf16 线性位置，0 开始
解析器的 TokenPos             
-----------------------------------------------------------------------------------------------------
CnPack 的 Pas/Cpp 结构      不展开 Tab              根据设置宽度展开 Tab       根据设置宽度展开 Tab
解析器是否自行展开 Tab      Tab 由 ConvertPos 处理      
-----------------------------------------------------------------------------------------------------
Pas/Cpp Token 的            1 开始的 TOTAEditPos    1 开始的 TOTAEditPos       1 开始的 TOTAEditPos
EditLine/EditCol 属性       EditCol 为 Ansi         EditCol 为 Utf8            EditCol 为 Ansi
=====================================================================================================

其他注意事项：

1、和当前光标有关的，需要使用 TOTAEditPos 类型的 Col。

2、结构解析器解析出来的 Token 的行列是基于字符的 Ansi/Wide 值，需要转换成 CharPos 再转换成 EditPos 再存储到 Token 的 EditLine/EditCol 属性里。以后在要跳转到此 Token 时才能直接使用 EditLine/EditCol。

3、CharPos 到 EditPos 的转换实际上是起始 0/1 的变换以及 Tab 键展开（D2005~2007 下还有 Utf8 展开），可以由 EditView 的 ConvertPos 做，Unicode 环境下也可以自己根据 Tab 键的宽度做（因为 Unicode 环境下 ConvertPos 不准）

4、另外，代码高亮中需要根据 Token 进行重画时，计算重画区域的 EditCol 应该全部使用 Ansi 的（视觉要求），但 D2005~2007 的 EditPos 的 Col 是 Utf8，所以 D2005~2007 下不能直接用 EditCol，另开了一个属性 EditAnsiCol 存储 Ansi 偏移，专门用来重画。

5、EditControl 的 LineText 属性表示光标所在的当前行的内容，但当本行内容为空时，无论光标在哪儿，LineText 均返回空，而不是一串空格。

6、D2009/2010下，给 EditView 设置 CursorPos 后，如立刻调用其 EditPosition.InsertText，文本的 Col 会有偏差，具体说会比应当插入的位置往左靠 n 个字符，n 等于光标左边的双字节字符数。

7、线性 Position “不超过行尾”的含义是，如果当前光标位置超出行尾，用该光标位置 ConvertPos 再 CharPosToPos 得到的线性位置，对应到的是行尾，而不是超出行尾的具体位置。

8、CnPack 语法解析器，D7 及以下使用 Ansi 版的 Lex 与 Parser，以上均使用 Wide 版的 Lex 和 Parser，所以 2005 或以上版本的相关表现均一致，无论是否 Unicode 环境。